<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <!-- Inherit from parent project -->
    <parent>
        <groupId>dev.dong4j</groupId>
        <artifactId>arco-project-builder</artifactId>
        <version>${revision}</version>
        <relativePath>../arco-project-builder/pom.xml</relativePath>
    </parent>

    <!-- Project coordinates -->
    <artifactId>arco-business-parent</artifactId>
    <packaging>pom</packaging>

    <!-- Project metadata -->
    <name>Arco Business Parent</name>
    <description>项目型父依赖</description>

    <!-- Project properties -->
    <properties>
        <!-- 如果是多模块项目, 为需要打包成 zip 的模块重写此配置 -->
        <package.name>${project.artifactId}</package.name>

        <maven-dependency-plugin.version>3.1.2</maven-dependency-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
    </properties>

    <build>
        <!-- 每个模块全部使用当前模块的 artifactId 来命名 -->
        <finalName>${package.name}</finalName>

        <plugins>
            <plugin>
                <groupId>dev.dong4j</groupId>
                <artifactId>arco-publish-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>dev.dong4j</groupId>
                <artifactId>arco-script-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>dev.dong4j</groupId>
                <artifactId>arco-makeself-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>dev.dong4j</groupId>
                <artifactId>arco-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>dev.dong4j</groupId>
                <artifactId>arco-container-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
            </plugin>
        </plugins>

        <!-- 插件依赖定义及配置 -->
        <pluginManagement>
            <plugins>
                <!-- 拷贝依赖到 jar 外面的 lib 目录 (maven 为所有项目自动添加此插件, 这里只是覆写 maven 默认配置, 子模块不需要再添加此依赖) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>copy-dependencies</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                <overWriteReleases>false</overWriteReleases>
                                <overWriteSnapshots>false</overWriteSnapshots>
                                <overWriteIfNewer>true</overWriteIfNewer>
                                <includeScope>runtime</includeScope>
                                <excludeArtifactIds>
                                    <!--region 编译阶段使用的依赖, 不需要被写入到部署包-->
                                    arco-processor-core,
                                    arco-processor-annotation,
                                    lombok,
                                    annotations,
                                    spring-boot-autoconfigure-processor,
                                    spring-boot-configuration-processor,
                                    mapstruct-processor,
                                    auto-service-annotations,
                                    auto-service,
                                    auto-common,
                                    spring-boot-devtools,
                                    checker-qual,
                                    error_prone_annotations
                                </excludeArtifactIds>
                                <excludeGroupIds>
                                    org.junit.*
                                </excludeGroupIds>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- 打包成 jar (maven 为所有项目自动添加此插件, 这里只是覆写 maven 默认配置, 子模块不需要再添加此依赖) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                    <configuration>
                        <archive>
                            <manifestEntries>
                                <!-- 编译的 JDK 版本 -->
                                <Compile-Source-JDK>${java.version}</Compile-Source-JDK>
                                <Compile-Target-JDK>${java.version}</Compile-Target-JDK>
                                <Project-Name>${project.build.finalName}</Project-Name>
                                <Project-Group>${project.groupId}</Project-Group>
                                <Built-By>${user.name}</Built-By>
                            </manifestEntries>
                            <manifest>
                                <!--suppress UnresolvedMavenProperty (由 arco-assist-maven-plugin:mainclass-property 自动生成)-->
                                <mainClass>${start.class}</mainClass>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                                <!--
                                    将 lib 增加到构建路径
                                    todo-dong4j : (2020年05月10日 10:28 下午) [不生成 class-path, 由启动脚本指定 -Dload.path=/path/to/lib]
                                    需要修改 arco-boot-loader 模块代码
                                -->
                                <addClasspath>true</addClasspath>
                                <!-- 指定生成的 Manifest 文件中 Class-Path 依赖 lib 前面都加上路径,构建出 lib/xx.jar -->
                                <classpathPrefix>lib/</classpathPrefix>
                            </manifest>
                        </archive>
                        <!-- 不需要被打包到 jar 中的文件, 如果是自定义配置, 不能使用 application 和 bootstrap 为文件名 -->
                        <excludes>
                            <!-- 排除 spring boot 应用的配置文件 -->
                            <exclude>application*.*</exclude>
                            <!-- 排除 spring cloud 应用的配置文件 -->
                            <exclude>bootstrap.*</exclude>
                            <!-- 排除 jrebel 插件生成的文件 -->
                            <exclude>rebel.xml</exclude>
                            <exclude>.rebel.xml.bak</exclude>
                            <!-- 排除 启动脚本 -->
                            <exclude>bin/server.sh</exclude>
                            <!-- 排除打包配置 -->
                            <exclude>assembly/assembly.xml</exclude>
                            <!-- 排除业务上需要使用到的文件, 比如密钥文件 (将被打包到 config/includes) -->
                            <exclude>includes/**</exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>dev.dong4j</groupId>
                    <artifactId>arco-publish-maven-plugin</artifactId>
                    <version>${arco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>publish-single</goal>
                            </goals>
                            <id>publish-single</id>
                        </execution>
                    </executions>
                </plugin>
                <!--
                    自动生成 server.sh 插件: 如果需要使用项目自己的启动脚本请放到 ${project.basedir}/bin/server.sh
                    该插件支持启用/禁用开关, configuration 中配置 skip=true
                    该插件支持自定义 jvm, configuration 中配置 jvmOptions
                -->
                <plugin>
                    <groupId>dev.dong4j</groupId>
                    <artifactId>arco-script-maven-plugin</artifactId>
                    <version>${arco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>generate-server-script</goal>
                            </goals>
                            <id>generate-server-script</id>
                            <phase>package</phase>
                        </execution>
                    </executions>
                </plugin>

                <!-- 生成自解压部署包 -->
                <plugin>
                    <groupId>dev.dong4j</groupId>
                    <artifactId>arco-makeself-maven-plugin</artifactId>
                    <version>${arco-maven-plugin.version}</version>
                    <configuration>
                        <!--suppress UnresolvedMavenProperty -->
                        <archiveDir>${project.build.finalName}</archiveDir>
                        <fileName>${project.build.finalName}.run</fileName>
                    </configuration>
                    <executions>
                        <execution>
                            <id>makeself</id>
                            <goals>
                                <goal>makeself</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>dev.dong4j</groupId>
                    <artifactId>arco-boot-maven-plugin</artifactId>
                    <version>${arco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>jar-repackage</id>
                            <goals>
                                <goal>jar-repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>dev.dong4j</groupId>
                    <artifactId>arco-container-maven-plugin</artifactId>
                    <version>${arco-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <!-- dev.dong4j.zeka.maven.plugin.container.mojo.DockerfileScriptMojo -->
                                <goal>generate-dockerfile</goal>
                            </goals>
                            <id>generate-dockerfile</id>
                            <phase>package</phase>
                        </execution>
                    </executions>
                </plugin>

                <!-- 统一使用 arco-assist-maven-plugin 插件生成的 assembly.xml 配置文件 mojo.dev.dong4j.zeka.maven.plugin.helper.GenerateAssemblyConfigFileMojo-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${maven-assembly-plugin.version}</version>
                    <configuration>
                        <appendAssemblyId>false</appendAssemblyId>
                        <!-- 由 arco-assist-maven-plugin 插件自动生成到 ./target/arco-maven-plugin/assembly, 避免每个项目手动配置 -->
                        <descriptors>
                            <descriptor>${project.build.directory}/arco-maven-plugin/assembly/assembly.xml</descriptor>
                        </descriptors>
                        <!--suppress UnresolvedMavenProperty 统一使用模块名(artifactId) -->
                        <finalName>${project.build.finalName}</finalName>
                        <!--suppress UnresolvedMavenProperty 由 arco-assist-maven-plugin 插件自动注入 -->
                        <outputTimestamp>${current.time}</outputTimestamp>
                        <!-- 没有打包配置时忽略打包 -->
                        <ignoreMissingDescriptor>true</ignoreMissingDescriptor>
                    </configuration>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

            </plugins>
        </pluginManagement>

        <!-- 设置 resources 文件, 包括 src/main/java 下的 properties 和 xml, src/main/resources 下的所有文件 -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>META-INF/**</include>
                    <!-- seata 配置文件 -->
                    <include>**/file.conf</include>
                    <!-- seata 配置文件 -->
                    <include>**/registry.conf</include>
                </includes>
                <filtering>true</filtering>
                <excludes>
                    <!--排除 jrebel 配置文件 -->
                    <exclude>rebel.xml</exclude>
                    <exclude>.rebel.xml.bak</exclude>
                    <!-- 排除启动脚本, 打包时迁移到外部目录 -->
                    <exclude>bin/server.sh</exclude>
                    <exclude>assembly/assembly.xml</exclude>
                </excludes>
            </resource>
            <!-- src/main/resources/includes 用于业务上需要使用到的文件, 比如密钥, 此目录下所有文件都不会在编译时被修改 -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>includes/**</include>
                    <!-- 前端模板 -->
                    <include>static/**</include>
                    <include>templates/**</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
        <testResources>
            <!-- 单元测试时引用src/main/resources 下的资源文件 -->
            <testResource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>includes/**</include>
                    <!-- 前端模板 -->
                    <include>static/**</include>
                    <include>templates/**</include>
                </includes>
                <filtering>false</filtering>
            </testResource>
            <!-- src/test/resources/includes 用于业务上需要使用到的文件, 比如密钥, 此目录下所有文件都不会在编译时被修改 -->
            <testResource>
                <directory>src/test/resources</directory>
                <includes>
                    <include>includes/**</include>
                    <include>templates/**</include>
                </includes>
                <filtering>false</filtering>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>META-INF/**</include>
                </includes>
                <filtering>true</filtering>
            </testResource>
        </testResources>
    </build>
</project>
